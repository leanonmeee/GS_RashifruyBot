import os
from faster_whisper import WhisperModel
import uuid
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters
import ffmpeg
import subprocess
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å whisper
model = WhisperModel("base", device="cpu")  # –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "tiny", "base", "small", "medium", "large"

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–∂–æ–∫, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–æ–º.")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ OGG –≤ WAV —á–µ—Ä–µ–∑ ffmpeg-python
def convert_ogg_to_wav(ogg_path, wav_path):
    subprocess.run([
        "ffmpeg", "-i", ogg_path,
        "-ar", "16000", "-ac", "1",
        "-c:a", "pcm_s16le", wav_path,
        "-y"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

async def transcribe_audio(path):
    return await asyncio.to_thread(model.transcribe, path)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∫—Ä—É–∂–∫–æ–≤
async def handle_voice_or_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.voice or update.message.video_note
    if not file:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–∂–æ–∫.")
        return

    file_id = str(uuid.uuid4())
    ogg_path = os.path.join(DOWNLOAD_DIR, f"{file_id}.ogg")
    wav_path = os.path.join(DOWNLOAD_DIR, f"{file_id}.wav")

    wait_message = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...")

    try:
        telegram_file = await context.bot.get_file(file.file_id)
        await telegram_file.download_to_drive(ogg_path)
        convert_ogg_to_wav(ogg_path, wav_path)

        segments, _ = await transcribe_audio(wav_path)
        text = " ".join([seg.text for seg in segments]).replace("?", ".").strip()

        await wait_message.delete()

        if text:
            await update.message.reply_text(
                f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}",
                reply_to_message_id=update.message.message_id
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.",
                reply_to_message_id=update.message.message_id
            )

    except Exception as e:
        await wait_message.delete()
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
            reply_to_message_id=update.message.message_id
        )
    finally:
        for path in (ogg_path, wav_path):
            if os.path.exists(path):
                os.remove(path)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    TOKEN = "" # –í–°–¢–ê–í–ò–¢–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù –ë–û–¢–ê
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VOICE | filters.VIDEO_NOTE, handle_voice_or_video_note))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()